---
import Button from "../shared/Button.astro";
import Container from "../shared/Container.astro";
import MagicStar from "../shared/MagicStar.astro";
---

<section class="h-fit panorama pb-2 panorama relative pt-32 lg:pt-36">
    <Container className={"pb-36 justify-center text-center flex flex-col gap-10 lg:gap-12"}>
        <h1 class="text-3xl/tight sm:text-4xl/tight md:text-5xl/tight xl:text-6xl/tight font-bold text-heading-1">
            <span class="magic-text relative">
              Build Your Business With Us
            </span>
        </h1>
        <div class="flex justify-center">
            <div class="w-fit magic">
                <MagicStar className={"gold"}/>
                <MagicStar className={"white"}/>
                <MagicStar className={"green"}/>
                <Button variant={"primary"} className={"text-lg relative text-white"}>
                    <span class="flex  relative z-[5]">
                      Book Discovery Call
                    </span>
                </Button>
            </div>
        </div>

    </Container>

    <script>
		let index = 0,
			interval = 1000;

		const rand = (min, max) =>
			Math.floor(Math.random() * (max - min + 1)) + min;

		const animate = star => {
			star.style.setProperty("--star-left", `${rand(-10, 100)}%`);
			star.style.setProperty("--star-top", `${rand(-40, 80)}%`);

			star.style.animation = "none";
			star.offsetHeight;
			star.style.animation = "";
		}

		let timeouts = [],
			intervals = [];

		const magic = document.querySelector(".magic");

		magic.onmouseenter = () => {
			let index = 1;

			for (const star of document.getElementsByClassName("magic-star")) {
				timeouts.push(setTimeout(() => {
					animate(star);

					intervals.push(setInterval(() => animate(star), 1000));
				}, index++ * 300));
			}
			;
		}

		magic.onmouseleave = () => {
			for (const t of timeouts) clearTimeout(t);
			for (const i of intervals) clearInterval(i);

			timeouts = [];
			intervals = [];
		}

		let el = document.getElementsByClassName("panorama")[0];
		let targetX = 0;
		let targetY = 0;
		let currentX = 0;
		let currentY = 0;
		const easingFactor = 0.07;

		function animate2() {
			// Calculate the distance between the current and target positions
			let dx = targetX - currentX;
			let dy = targetY - currentY;

			// Apply easing to the distance values
			let vx = Math.floor(dx * easingFactor);
			let vy = Math.floor(dy * easingFactor);

			// Update the current positions
			currentX += vx;
			currentY += vy;

			// Set the CSS custom properties with the current positions
			el.style.setProperty("--x", `${currentX}px`);
			el.style.setProperty("--y", `${currentY}px`);

			// Request the next animation frame
			requestAnimationFrame(animate2);
		}

		el.addEventListener('mousemove', (e) => {
			const d = el.getBoundingClientRect();
			let x = e.clientX - (d.left + Math.floor(d.width / 2));
			let y = e.clientY - (d.top + Math.floor(d.height / 2));
			// Invert values
			x = x - x * 2;
			y = y - y * 2;

			targetX = Math.floor(x / 2 - 500);
			targetY = Math.floor(y / 2 - 200);
		});

        // Start the animation loop
        animate2();


    </script>

    <style>
        .panorama {
            background: var(--bg-gradient), var(--bg-image) no-repeat var(--x) var(--y);
            background-size: var(--bg-size);
        }
    </style>

</section>